/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : AD1.h
**     Project     : DV-DMK-VF11-03-V1.0
**     Processor   : MC9S12ZVL32MLF
**     Component   : ADC
**     Version     : Component 01.690, Driver 01.00, CPU db: 3.00.000
**     Compiler    : CodeWarrior HCS12Z C Compiler
**     Date/Time   : 2016-10-11, 08:57, # CodeGen: 7
**     Abstract    :
**         This device "ADC" implements an A/D converter,
**         its control methods and interrupt/event handling procedure.
**     Settings    :
**          Component name                                 : AD1
**          A/D converter                                  : ADC0
**          Sharing                                        : Disabled
**          Interrupt service/event                        : Disabled
**          A/D channels                                   : 3
**            Channel0                                     : 
**              A/D channel (pin)                          : PAD0_KWAD0_AN0_VRH
**              A/D channel (pin) signal                   : 
**            Channel1                                     : 
**              A/D channel (pin)                          : PAD1_KWAD1_AN1_VRL
**              A/D channel (pin) signal                   : 
**            Channel2                                     : 
**              A/D channel (pin)                          : PAD2_KWAD2_AN2
**              A/D channel (pin) signal                   : 
**          Queue                                          : Enabled
**            Mode                                         : Sequential
**            A/D samples                                  : 3
**              Sample0                                    : Enabled
**                Channel                                  : 0
**                Sample time                              : 4 ADC clock cycles
**                High volt. ref. source                   : VRH_1
**                Low volt. ref. source                    : VRL_1
**              Sample1                                    : Enabled
**                Channel                                  : 1
**                Sample time                              : 4 ADC clock cycles
**                High volt. ref. source                   : VRH_1
**                Low volt. ref. source                    : VRL_1
**              Sample2                                    : Enabled
**                Channel                                  : 2
**                Sample time                              : 4 ADC clock cycles
**                High volt. ref. source                   : VRH_1
**                Low volt. ref. source                    : VRL_1
**          A/D resolution                                 : Autoselect
**          Conversion time                                : 3.625 ?s
**          Result mode                                    : Right justified
**          External trigger                               : Disabled
**          Internal trigger                               : Disabled
**          Number of conversions                          : 1
**          Initialization                                 : 
**            Enabled in init. code                        : yes
**            Events enabled in init.                      : yes
**          CPU clock/speed selection                      : 
**            High speed mode                              : This component enabled
**            Low speed mode                               : This component disabled
**            Slow speed mode                              : This component disabled
**          High input limit                               : 1
**          Low input limit                                : 0
**          Get value directly                             : yes
**          Wait for result                                : yes
**     Contents    :
**         Measure    - byte AD1_Measure(bool WaitForResult);
**         GetValue16 - byte AD1_GetValue16(word *Values);
**
**     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
**     All Rights Reserved.
**     
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**     
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**     
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**     
**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**     
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**     
**     http: www.freescale.com
**     mail: support@freescale.com
** ###################################################################*/
/*!
** @file AD1.h
** @version 01.00
** @brief
**         This device "ADC" implements an A/D converter,
**         its control methods and interrupt/event handling procedure.
*/         
/*!
**  @addtogroup AD1_module AD1 module documentation
**  @{
*/         

#ifndef __AD1_H
#define __AD1_H

#include "derivative.h"

#define CEASE_ERROR_MASK          0xF8U   /* Constant for check the error flags register of the Error type if it holds the cease flags or not */
#define ERR_FLG_CEASE_ERROR_MASK  0xF800U /* Constant for check the variable of the Error type if it holds the cease flags or not */
#define ERR_FLG_MASK              0xFE40U /* Constant for check the variable of the Error type if it holds any error flags or not */


#ifndef __BWUserType_AD1_TError
#define __BWUserType_AD1_TError
  /*lint -save  -esym(960,18.4) Disable MISRA rule (18.4) checking. */
  typedef union {
    word err;
    struct {
      /*lint -save  -e46 Disable MISRA rule (6.4) checking. */
      word                           : 1; /* Reserved */
      word                           : 1; /* Reserved */
      word                           : 1; /* Reserved */
      word                           : 1; /* Reserved */
      word                           : 1; /* Reserved */
      word                           : 1; /* Reserved */
      word ConversionOverrun_Error   : 1; /* Overrun of the ADCxCONIF register */
      word                           : 1; /* Reserved */
      word                           : 1; /* Reserved */
      word LDOK_Error                : 1; /* Restart without Load OK */
      word Restart_Error             : 1; /* Restart in the wrong time */
      word Trigger_Error             : 1; /* Trigger in the wrong time or trigger overflow - Cease ADC operation. */
      word CompareValue_Error        : 1; /* Compare value not available - Cease ADC operation. */
      word EOL_Error                 : 1; /* End of list command missing in the current CSL - Cease ADC operation. */
      word CommandValue_Error        : 1; /* Invalid conversion command loaded - Cease ADC operation. */
      word IllegalAccess_Error       : 1; /* Wrong DMA access to illegal memory area - Cease ADC operation. */
      /*lint -restore Enable MISRA rule (6.4) checking. */
    } errName;
  } AD1_TError;                        /* Error flags. For languages which don't support bit access is byte access only to error flags possible. */
  /*lint -restore  +esym(960,18.4) Enable MISRA rule (18.4) checking. */
#endif




byte AD1_Measure(bool WaitForResult);
/*
** ===================================================================
**     Method      :  AD1_Measure (component ADC)
*/
/*!
**     @brief
**         This method performs one measurement on all channels that
**         are set in the component inspector. (Note: If the [number of
**         conversions] is more than one the conversion of A/D channels
**         is performed specified number of times.)
**     @param
**         WaitForResult   - Wait for a result of a
**                           conversion. If [interrupt service] is
**                           disabled, A/D peripheral doesn't support
**                           measuring all channels at once or Autoscan
**                           mode property isn't enabled and at the same
**                           time the [number of channels] is greater
**                           than 1, then the WaitForResult parameter is
**                           ignored and the method waits for each
**                           result every time. If the [interrupt
**                           service] is disabled and a [number of
**                           conversions] is greater than 1, the
**                           parameter is ignored and the method also
**                           waits for each result every time.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - Device is disabled
**                           ERR_BUSY - A conversion is already running
*/
/* ===================================================================*/

byte AD1_GetValue16(word *Values);
/*
** ===================================================================
**     Method      :  AD1_GetValue16 (component ADC)
*/
/*!
**     @brief
**         This method returns the last measured values of all channels.
**         Compared with [GetValue] method this method returns more
**         accurate result if the [number of conversions] is greater
**         than 1 and [AD resolution] is less than 16 bits. In addition,
**         the user code dependency on [AD resolution] is eliminated.
**     @param
**         Values          - Pointer to the array that contains
**                           the measured data.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_NOTAVAIL - Requested value not
**                           available
**                           ERR_OVERRUN - External trigger overrun flag
**                           was detected after the last value(s) was
**                           obtained (for example by GetValue). This
**                           error may not be supported on some CPUs
**                           (see generated code).
*/
/* ===================================================================*/

void AD1_SetHigh(void);
/*
** ===================================================================
**     Method      :  AD1_SetHigh (component ADC)
**
**     Description :
**         The method reconfigures the component and its selected 
**         peripheral(s) when the CPU is switched to the High speed mode. 
**         The method is called automatically as s part of the CPU 
**         SetHighSpeed method.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

void AD1_Init(void);
/*
** ===================================================================
**     Method      :  AD1_Init (component ADC)
**
**     Description :
**         Initializes the associated peripheral(s) and the components 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

word AD_Average_Calculate(word *AD_Array,byte Arrsize);



#pragma CODE_SEG DEFAULT
/* END AD1. */

#endif
/* ifndef __AD1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale HCS12Z series of microcontrollers.
**
** ###################################################################
*/
